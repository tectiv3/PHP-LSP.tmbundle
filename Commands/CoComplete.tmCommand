<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -wU
# encoding: utf-8

# if ENV['TM_ENABLE_IS'] != 'true'
#   return
# end

require 'net/http'
require 'json'

SUPPORT = ENV['TM_SUPPORT_PATH']
DIALOG = SUPPORT + '/bin/tm_dialog'

require SUPPORT + '/lib/escape'

require ENV['TM_BUNDLE_SUPPORT'] + '/lib/php.rb'
require ENV['TM_SUPPORT_PATH'] + '/lib/ui'
require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'

def initialize_project()
  dir = ENV['TM_PROJECT_DIRECTORY']+'/'
  uri = URI('http://127.0.0.1:8787/')
  name = File.basename(ENV['TM_PROJECT_DIRECTORY']) || ENV['TM_DISPLAYNAME']

  http = Net::HTTP.new(uri.host, uri.port)
  req = Net::HTTP::Post.new(uri.path, 'Content-Type' =&gt; 'application/json')
  req.body = { 'method' =&gt; 'initialize', 'body' =&gt; { 'dir' =&gt; dir, 'name' =&gt; name }}.to_json
  res = http.request(req)
  json = JSON.parse res.body
  if json['result'] == "error"
    TextMate.exit_show_tool_tip(json['message'])
    return
  end
rescue =&gt; _
  # TextMate.exit_show_tool_tip "failed #{e}"
  return
end

def get_completion(file, lineNum, char)
    document = []
    while line = $stdin.gets
      document.push(line)
    end
    text = document.join
    if text.length &gt; 1000000
      TextMate.exit_show_tool_tip("File is too big, ignoring...")
    end

    uri = URI('http://127.0.0.1:8787/')
    http = Net::HTTP.new(uri.host, uri.port)
    req = Net::HTTP::Post.new(uri.path, 'Content-Type' =&gt; 'application/json')
    ext = File.extname(ENV['TM_FILEPATH']).strip.downcase[1..-1]

    req.body = {
      'method': 'getCompletions', 
      'body': { 
        'uri': file, 
        'languageId' =&gt; ext,
        'text' =&gt; text, 
        'position': {line: lineNum, character: char}
      }
    }.to_json
    res = http.request(req)
    json = JSON.parse res.body
    if json['result'] == "error"
      TextMate.exit_show_tool_tip(json['message'])
    end
    if json['result'] == "No completions"
      TextMate.exit_show_tool_tip(json['result'])
    end
    return json['result']
rescue =&gt; e
    TextMate.exit_show_tool_tip "failed #{e}"
end

# TextMate.exit_show_tool_tip ENV['TM_COLUMN_NUMBER'].to_i-1
# initialize_project()
print get_completion(ENV['TM_FILEPATH'], ENV['TM_LINE_NUMBER'].to_i-1, ENV['TM_COLUMN_NUMBER'].to_i-1)</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>~</string>
	<key>name</key>
	<string>Copilot</string>
	<key>outputCaret</key>
	<string>selectOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>atCaret</string>
	<key>uuid</key>
	<string>9E0F16E9-7498-4C5A-B623-926B1E4569AE</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
