<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -wU

require 'net/http'
require 'json'

require ENV['TM_SUPPORT_PATH'] + '/lib/ui'
require ENV['TM_SUPPORT_PATH'] + '/lib/exit_codes'

def initialize_project()
  dir = ENV['TM_PROJECT_DIRECTORY']+'/'
  uri = URI('http://127.0.0.1:8787/')
  name = File.basename(ENV['TM_PROJECT_DIRECTORY']) || ENV['TM_DISPLAYNAME']

  http = Net::HTTP.new(uri.host, uri.port)
  req = Net::HTTP::Post.new(uri.path, 'Content-Type' =&gt; 'application/json')
  req.body = { 'method' =&gt; 'initialize', 'body' =&gt; { 'dir' =&gt; dir, 'name' =&gt; name,
      'storage' =&gt; "/tmp/intelephense/" }}.to_json
  res = http.request(req)
  json = JSON.parse res.body
  if json['result'] == "error"
    TextMate.exit_show_tool_tip(json['message'])
  end
rescue =&gt; e
  TextMate.exit_show_tool_tip "failed #{e}"
end

def did_open(file)
    document = []
    while line = $stdin.gets
      document.push(line)
    end
    text = document.join
    if text.length &gt; 1000000
      TextMate.exit_show_tool_tip("File is too big, ignoring...")
    end
    uri = URI('http://127.0.0.1:8787/')
    http = Net::HTTP.new(uri.host, uri.port)
    req = Net::HTTP::Post.new(uri.path, 'Content-Type' =&gt; 'application/json')
    req.body = {'method' =&gt; 'didOpen', 'body' =&gt; { 'uri' =&gt; "file://" + file, 
        "languageId" =&gt; "php", "version" =&gt; (rand() * 10).to_i, "text" =&gt; text}}.to_json
    res = http.request(req)
    json = JSON.parse res.body
    if json['result'] == "error"
      return
    end
    if json['result'] == "ok"
      return
    end
    system(ENV['TM_MATE'], "--uuid", ENV['TM_DOCUMENT_UUID'], "--clear-mark=note", "--clear-mark=warning", "--clear-mark=error")
    json['result'].each do |line|
      setMark(line)
    end
rescue =&gt; e
    TextMate.exit_show_tool_tip "failed #{e}"
end

def getIcon(severity)
  case severity
  when 4
    return 'note'
  when 3
    return 'warning'
  end
  return 'error'
end

def setMark(line)
  range = line['range']
  unless range['start']['line'].nil?
    lineno = range['start']['line']+1
    column = range['start']['character']+1
    icon = getIcon(line['severity'])
    message = line['message']
    tm_args = ["--uuid", ENV['TM_DOCUMENT_UUID'], "--line=#{lineno}:#{column || '1'}", "--set-mark=#{icon}:#{message}"]
    system(ENV['TM_MATE'], *tm_args)
  end
rescue =&gt; e
  TextMate.exit_show_tool_tip "failed #{e}"
end

initialize_project()
did_open(ENV['TM_FILEPATH'])

# puts "opened " + ENV['TM_FILEPATH']</string>
	<key>input</key>
	<string>document</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>name</key>
	<string>On Save</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>discard</string>
	<key>scope</key>
	<string>source.php</string>
	<key>semanticClass</key>
	<string>callback.document.will-save</string>
	<key>uuid</key>
	<string>34EC1ABE-ED99-4B78-B193-CBBBAB0EC28A</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
